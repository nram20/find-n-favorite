'use strict';

angular.module('myApp', ['ui.router', 'satellizer', 'ngFileUpload']).config(["$authProvider", function ($authProvider) {

	$authProvider.loginUrl = '/api/users/login';
	$authProvider.signupUrl = '/api/users/signup';

	// configure satellizer by giving it the provider app ID
	// specify the url to make a post request to when the token is generated by satellizer
	$authProvider.facebook({
		clientId: '1153082801420831',
		url: '/api/users/facebook'
	});
}]).config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
	$stateProvider.state('home', { url: '/', templateUrl: '/html/home.html' }).state('login', {
		url: '/login',
		templateUrl: '/html/login.html',
		controller: 'loginCtrl'
	}).state('register', {
		url: '/register',
		templateUrl: '/html/register.html',
		controller: 'registerCtrl'
	}).state('profile', {
		url: '/profile',
		templateUrl: '/html/profile.html',
		controller: 'profileCtrl',
		resolve: {
			Profile: ["User", function Profile(User) {
				return User.getProfile();
			}]
		}
	}).state('search', {
		url: '/search',
		templateUrl: '/html/search.html',
		controller: 'searchCtrl'
	}).state('businessShow', {
		url: '/businessShow/:yelpId',
		templateUrl: '/html/businessShow.html',
		controller: 'businessShowCtrl',
		resolve: {
			BusinessById: ["$stateParams", "Business", function BusinessById($stateParams, Business) {
				return Business.searchById($stateParams.yelpId);
			}],
			BusinessFavorites: ["$stateParams", "Business", function BusinessFavorites($stateParams, Business) {
				return Business.countFavorites($stateParams.yelpId);
			}]
		}
	});

	$urlRouterProvider.otherwise('/');
}])
// create a new filter -- titlecase filter
// everytime a value changes that uses this filter, this function will get triggered
// and it'll also trigger right away upon initial page load
.filter('titlecase', function () {
	// give it the standard dependency-injecting function
	// return the filter function
	return function (inputStr) {
		if (typeof inputStr !== 'string' || !inputStr.length) return;
		console.log('inputStr:', inputStr);

		// return the updated string
		return inputStr.toLowerCase().split(' ').map(function (word) {
			return word[0].toUpperCase() + word.slice(1);
		}).join(' ');
	};
}).filter('total', function () {
	// potentially useful for updating totals; alternative to $scope.$watch
	return function (nums) {
		// given input array
		return nums.reduce(function (sum, num) {
			return sum + num;
		}, 0); // get sum
	};
});
'use strict';

angular.module('myApp').controller('businessShowCtrl', ["$scope", "Business", "BusinessById", "BusinessFavorites", function ($scope, Business, BusinessById, BusinessFavorites) {
	console.log('businessShowCtrl');
	$scope.business = BusinessById;
	$scope.numOfFavorites = BusinessFavorites;
	console.log('$scope.business:', $scope.business);
}]);
'use strict';

angular.module('myApp').controller('loginCtrl', ["$scope", "$state", "$auth", function ($scope, $state, $auth) {
	console.log('loginCtrl!');

	$scope.login = function () {
		$auth.login($scope.user).then(function (res) {
			console.log('res:', res);
			$state.go('profile');
		}).catch(function (err) {
			console.log('err:', err);
		});
	};
}]);
'use strict';

angular.module('myApp').controller('mainCtrl', ["$scope", "$auth", "$state", "$rootScope", function ($scope, $auth, $state, $rootScope) {
	console.log('mainCtrl!');

	$scope.headerController = function ($scope, $location) {
		$scope.isActive = function (viewLocation) {
			return viewLocation === $location.path();
		};
	};

	// find out whether user is authenticated/logged in
	$scope.isAuthenticated = function () {
		return $auth.isAuthenticated();
	};

	this.author = 'sonam kindy'; // example of using titlecase filter in module.js

	$scope.authenticate = function (provider) {
		// provider is string we pass in, like 'facebook'
		$auth.authenticate(provider).then(function (res) {
			$state.go('profile');
			console.log('res:', res);
		}).catch(function (err) {
			console.log('err:', err);
		});
	};

	$scope.logout = function () {
		$auth.logout();
		$state.go('home');
		$rootScope.currentUser = null;
	};
}]);
'use strict';

angular.module('myApp').controller('profileCtrl', ["$rootScope", "$scope", "User", "Profile", "Business", function ($rootScope, $scope, User, Profile, Business) {
	console.log('profileCtrl');

	$scope.myProfile = false;
	$rootScope.currentUser = Profile;
	console.log('$rootScope.currentUser:', $rootScope.currentUser);

	$scope.deleteFavorite = function (business) {
		Business.deleteFavorite(business).then(function (res) {
			$rootScope.currentUser = res;
		}).catch(function (err) {
			console.log('err:', err);
		});
	};
}]);
'use strict';

angular.module('myApp').controller('registerCtrl', ["$scope", "$state", "$auth", function ($scope, $state, $auth) {
	console.log('registerCtrl!');

	$scope.register = function () {
		if ($scope.user.password !== $scope.user.password2) {
			$scope.user.password = null;
			$scope.user.password2 = null;
			alert('Passwords must match.  Try again.');
		} else {

			$auth.signup($scope.user).then(function (res) {
				console.log('res:', res);
				$state.go('login');
			}).catch(function (err) {
				console.log('err:', err);
			});
		}
	};
}]);
'use strict';

angular.module('myApp').controller('searchCtrl', ["$scope", "Business", "$rootScope", function ($scope, Business, $rootScope) {
	console.log('searchCtrl');

	$scope.submit = function () {
		console.log('submit');
		Business.search($scope.params).then(function (res) {
			console.log('res:', res);
			$scope.businesses = res;
			$scope.params = null;
		}).catch(function (err) {
			console.log('err:', err);
		});
	};

	$scope.addFavorite = function (business) {
		console.log('business:', business);
		Business.addFavorite(business).then(function (res) {
			console.log('res:', res);
			$rootScope.currentUser = res;
		}).catch(function (err) {
			console.log('err:', err);
		});
	};
}]);
'use strict';

angular.module('myApp').service('Business', ["$http", "$state", "$q", function ($http, $state, $q) {

	// /search
	this.search = function (params) {
		return $http.get('/api/businesses/search/' + params.term + '/' + params.loc).then(function (res) {
			return $q.resolve(res.data.businesses);
		}).catch(function (err) {
			console.log('err:', err);
		});
	};

	// single business view
	this.searchById = function (id) {
		return $http.get('/api/businesses/searchById/' + id).then(function (res) {
			return $q.resolve(res.data);
		}).catch(function (err) {
			console.log('err:', err);
		});
	};

	// number of favorites business has
	this.countFavorites = function (id) {
		return $http.get('/api/businesses/countFavorites/' + id).then(function (res) {
			return $q.resolve(res.data);
		}).catch(function (err) {
			console.log('err:', err);
		});
	};

	// user add favorite
	this.addFavorite = function (business) {
		return $http.post('/api/businesses/addFavorite/' + business.id, business).then(function (res) {
			return $q.resolve(res.data);
		}).catch(function (err) {
			console.log('err:', err);
		});
	};

	// user delete favorite
	this.deleteFavorite = function (business) {
		console.log('business:', business);
		return $http.delete('/api/businesses/deleteFavorite/' + business.yelpId).then(function (res) {
			return $q.resolve(res.data);
		}).catch(function (err) {
			console.log('err:', err);
		});
	};
}]);
'use strict';

angular.module('myApp').service('User', ["$http", "$rootScope", "$state", "$q", function ($http, $rootScope, $state, $q) {

	// this.getAll = () => {
	// 	return $http.get('/api/users')
	// 		.then(res => {
	// 			return $q.resolve(res.data);
	// 		})
	// 		.catch(err => {
	// 			console.log('err:', err);
	// 		})
	// }

	this.update = function (id, profile) {
		return $http.put('/api/users/profile/update/' + id, profile);
	};

	this.getProfile = function () {
		return $http.get('/api/users/profile').then(function (res) {
			return $q.resolve(res.data);
		}).catch(function (err) {
			console.log('err:', err);
		});
	};
}]);
//# sourceMappingURL=data:application/json;base64,
